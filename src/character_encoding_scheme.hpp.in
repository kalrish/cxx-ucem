#include <cstddef>
#include <climits>

#include "detail.hpp"


namespace Unicode_CharacterEncodingModel {
	/**
	 * Base class for character encoding schemes.
	 * 
	 * Character encoding scheme implementations should not derive from this
	 * class; instead, they should derive from the class template appropriate to
	 * their type.
	 * 
	 * @tparam CodeUnitWidth     The binary width (number of bits) occupied by
	 *                              each code unit.
	*/
	template<
	 std::size_t CodeUnitWidth
	>
	class CharacterEncodingScheme
	{
		public:
			/**
			 * Integer type capable of holding any of the values that code units
			 *    mapped by the character encoding scheme may take.
			 * 
			 * @note This type might be capable of holding values not handled by the
			 * character encoding scheme. For example, on a system where bytes had
			 * 8 bits each, a character encoding scheme that worked with code units
			 * 7-bit wide would get a type with at least 8 bits.
			*/
			using code_unit =
				typename detail::select_appropriate_code_unit<detail::round_to_byte_multiple(CodeUnitWidth)>::type;
		
		public:
			/**
			 * The binary width occupied by each code unit.
			*/
			static constexpr auto
				code_unit_width = CodeUnitWidth;
		
		static_assert( sizeof(code_unit) * CHAR_BIT >= code_unit_width , "" );
		
		public:
			CharacterEncodingScheme
				( )
				= delete;
			CharacterEncodingScheme
				(
				 const CharacterEncodingScheme &
				)
				= delete;
			CharacterEncodingScheme
				(
				 CharacterEncodingScheme &&
				)
				= delete;
			~CharacterEncodingScheme
				( )
				= delete;
	};
	
	/**
	 * Namespace reserved for character encoding scheme implementations.
	*/
	namespace character_encoding_schemes {
		/**
		 * Namespace reserved for private use of character encoding scheme implementations.
		*/
		namespace detail { }
	}
}